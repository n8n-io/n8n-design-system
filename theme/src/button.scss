@charset "UTF-8";
@use 'common/var';
@use 'mixins/button';
@use 'mixins/mixins';
@use 'mixins/utils';
@use 'mixins/function';

@include mixins.b(button) {
  display: inline-block;
  line-height: 1;
  white-space: nowrap;
  cursor: pointer;
  border: var.$border-base;
  -webkit-appearance: none;
  text-align: center;
  box-sizing: border-box;
  outline: none;
  margin: 0;
  transition: 0.1s;
  font-weight: var(--font-weight-semi-bold);
  @include utils.utils-user-select(none);

  @include button.button-size(
    var(--spacing-xs),
    var(--spacing-m),
    var(--font-size-s),
    var(--border-radius-base)
  );

  &:active {
    color: function.saturation(
      --color-primary-h,
      --color-primary-s,
      --color-primary-l,
      -(var.$button-active-shade-percent)
    );
    border-color: function.saturation(
      --color-primary-h,
      --color-primary-s,
      --color-primary-l,
      -(var.$button-active-shade-percent)
    );
    outline: none;
  }

  &::-moz-focus-inner {
    border: 0;
  }

  @include mixins.when(disabled) {
    &,
    &:hover,
    &:focus {
      cursor: not-allowed;
      background-image: none;
    }

    &.el-button--text {
      background-color: transparent;
    }
  }

  @include mixins.when(loading) {
    position: relative;
    pointer-events: none;

    &:before {
      pointer-events: none;
      content: '';
      position: absolute;
      left: -1px;
      top: -1px;
      right: -1px;
      bottom: -1px;
      border-radius: inherit;
      background-color: rgba(255, 255, 255, 0.35);
    }
  }
  @include mixins.when(round) {
    border-radius: var(--button-radius-round);
  }
  @include mixins.when(circle) {
    border-radius: var(--button-radius-circle);
    padding: var.$button-padding-vertical;
  }
  @include mixins.m(primary) {
    @include button.button-variant(
      var.$button-primary-font-color,
      var.$button-primary-background-color,
      var.$button-primary-border-color,
      --color-primary-h,
      --color-primary-s,
      --color-primary-l
    );
  }
  @include mixins.m(success) {
    @include button.button-variant(
      var.$button-success-font-color,
      var.$button-success-background-color,
      var.$button-success-border-color,
      --color-success-h,
      --color-success-s,
      --color-success-l
    );
  }
  @include mixins.m(warning) {
    @include button.button-variant(
      var.$button-warning-font-color,
      var.$button-warning-background-color,
      var.$button-warning-border-color,
      --color-warning-h,
      --color-warning-s,
      --color-warning-l
    );
  }
  @include mixins.m(danger) {
    @include button.button-variant(
      var.$button-danger-font-color,
      var.$button-danger-background-color,
      var.$button-danger-border-color,
      --color-danger-h,
      --color-danger-s,
      --color-danger-l
    );
  }
  @include mixins.m(info) {
    @include button.button-variant(
      var.$button-info-font-color,
      var.$button-info-background-color,
      var.$button-info-border-color,
      --color-info-h,
      --color-info-s,
      --color-info-l
    );
  }
  @include mixins.m(medium) {
    @include button.button-size(
	var(--spacing-2xs),
	var(--spacing-xs),
      	var(--font-size-2xs),
      var.$button-medium-border-radius
    );
    @include mixins.when(circle) {
      padding: var.$button-medium-padding-vertical;
    }
  }
  @include mixins.m(small) {
    @include button.button-size(
      var(--spacing-3xs),
      var(--spacing-xs),
      var(--font-size-2xs),
      var.$button-small-border-radius
    );
    @include mixins.when(circle) {
      padding: var.$button-small-padding-vertical;
    }
  }
  @include mixins.m(mini) {
    @include button.button-size(
      var.$button-mini-padding-vertical,
      var.$button-mini-padding-horizontal,
      var.$button-mini-font-size,
      var.$button-mini-border-radius
    );
    @include mixins.when(circle) {
      padding: var.$button-mini-padding-vertical;
    }
  }
  @include mixins.m(text) {
    border-color: transparent;
    color: var.$color-primary;
    background: transparent;
    padding-left: 0;
    padding-right: 0;

    &:hover,
    &:focus {
      border-color: transparent;
      background-color: transparent;
    }

    &:active {
      color: function.saturation(
        --color-primary-h,
        --color-primary-s,
        --color-primary-l,
        -(var.$button-active-shade-percent)
      );
      border-color: transparent;
      background-color: transparent;
    }

    &.is-disabled,
    &.is-disabled:hover,
    &.is-disabled:focus {
      border-color: transparent;
    }
  }
}

@include mixins.b(button-group) {
  @include utils.utils-clearfix;
  display: inline-block;
  vertical-align: middle;

  & > .el-button {
    float: left;
    position: relative;
    & + .el-button {
      margin-left: 0;
    }
    &.is-disabled {
      z-index: 1;
    }
    &:first-child {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
    &:last-child {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
    &:first-child:last-child {
      border-top-right-radius: var.$button-border-radius;
      border-bottom-right-radius: var.$button-border-radius;
      border-top-left-radius: var.$button-border-radius;
      border-bottom-left-radius: var.$button-border-radius;

      &.is-round {
        border-radius: 20px;
      }

      &.is-circle {
        border-radius: 50%;
      }
    }
    &:not(:first-child):not(:last-child) {
      border-radius: 0;
    }
    &:not(:last-child) {
      margin-right: -1px;
    }

    &:hover,
    &:focus,
    &:active {
      z-index: 1;
    }

    @include mixins.when(active) {
      z-index: 1;
    }
  }

  & > .el-dropdown {
    & > .el-button {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
      border-left-color: rgba(var.$color-white, 0.5);
    }
  }

  @each $type in (primary, success, warning, danger, info) {
    .el-button--#{$type} {
      &:first-child {
        border-right-color: rgba(var.$color-white, 0.5);
      }
      &:last-child {
        border-left-color: rgba(var.$color-white, 0.5);
      }
      &:not(:first-child):not(:last-child) {
        border-left-color: rgba(var.$color-white, 0.5);
        border-right-color: rgba(var.$color-white, 0.5);
      }
    }
  }
}
